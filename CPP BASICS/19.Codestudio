// sqrt(x)
long long int BinarySearch(int n){
    int s = 0;
    int e = n;
    long long  mid = s + (e-s)/2;
    long long int ans = -1;
    while(s <= e){
        long long int square = mid*mid;
        if(square == n){
            return mid;
        }
        if(square < n){
          ans = mid;
          s = mid + 1;
        }
        else{
            e = mid -1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}
int floorSqrt(int n)
{
    return BinarySearch(n);
}
// Search in a sorted array
int getPivot(int*arr,int n){
  int s = 0;
  int e = n-1;
  int mid = s + (e-s)/2;
  while(s < e){
  if(arr[mid] >= arr[0]){
     s = mid+1;
  }
   else{
       e = mid;
   }
   mid = s + (e-s)/2;
 }
  return s;
} 
int binarySearh(int* arr,int start,int end,int key){
    int s = start;
    int e = end;
    int mid = s + (e-s)/2;
    while(s <= e){
    if(key == arr[mid]){
      return mid;
    }
    else if(key <= arr[mid]){
        e = mid -1;
    }
    else{
        s = mid + 1;
    }
    mid = s+(e-s)/2;
    }
    return -1;
}
int search(int* arr, int n, int key) {
    // Write your code here.
    int pivot = getPivot(arr,n);
    if(key >= arr[pivot] && key <= arr[n-1]){
        return binarySearh(arr,pivot,n-1,key);
    }
    else{
        return binarySearh(arr,0,pivot-1,key);
    }
}
// book allocation problem
bool check(int mid, vector <int> &arr, int n, int m){

    int sum = 0;

    for (int i=0; i<n; i++) {        

        if (sum+arr[i] > mid) {

            sum = arr[i];

            m--;

        } else {

            sum += arr[i];

        }

        if (m<=0) return false;

    }

    return true;

}

 

int findPages(vector<int>& arr, int n, int m) {

    // Write your code here.

    if (m > n) {

        return -1;

    } 

 

    int maxim = -1;

    int lo=1, high = 0;

    for (int i=0; i<n; i++) {

        high += arr[i];

        maxim = max(maxim, arr[i]);

    }

 

    if (m==n) {

        return maxim;

    }

 

    int ans=-1;

    int hi = high;

    while(lo<=hi){

        int mid=(lo+hi)/2;

 

        if(check(mid, arr, n, m)){

            ans=mid;

            hi=mid-1;  

        }

        else{

            lo=mid+1;

        }

    }

    return ans;

 

}

 

// bool isPossible(vector<int>& arr,int n,int m,int mid){
//     int studentCount = 1;
//     int pageSum = 0;
//     for(int i=0;i<n;i++){
//         if(pageSum + arr[i] <= mid){
//             pageSum += arr[i];
//         }
//         else{
//             if(arr[i] > mid){
//                 return false;
//             }
//             pageSum = arr[i];
//             studentCount++;
//             if(studentCount > m){
//                 return false;
//             }
//         }
//     }
//     return true;
// }
// int findPages(vector<int>& arr, int n, int m) {
//     // Write your code here.
//     int s = 0;
//     int sum = 0;
//     for(int i=0;i<n;i++){
//         sum += arr[i];
//     }
//      int ans = -1;
//     int e = sum;
//     int mid = s + (e-s)/2;
//     while(s <= e){
//         if(isPossible(arr,n,m,mid)){
//           ans = mid;
//           e = mid -1;
//         }
//         else{
//             s = mid + 1;
//         }
//         mid = s+(e-s)/2;
//     }
//     return ans;
// }